var searchIndex = {};
searchIndex['slice_as_array'] = {"items":[[14,"slice_as_array!","slice_as_array","Convert a slice to an array.\n`slice_as_array!(slice, [element_type; array_length]) -> Option<&[element_type; array_length]>`",null,null],[14,"slice_as_array_mut!","","Convert a mutable slice to a mutable array.\n`slice_as_array_mut!(mutable_slice, [element_type; array_length]) -> Option<&mut [element_type; array_length]>`",null,null],[14,"slice_to_array_clone!","","Convert a slice to an array by cloning each element.\n`slice_to_array_clone!(slice, [element_type; array_length]) -> Option<[element_type; array_length]>`",null,null]],"paths":[]};
searchIndex["slice_as_array"] = {"doc":"This crate provides macros to convert from slices, which have lengths\nthat are stored and checked at runtime, into arrays, which have lengths\nknown at compile time. This can make types more expressive (e.g.\n`&amp;[u8; 32]` instead of `&amp;[u8]`) and helps the compiler omit bounds checks.","items":[[14,"slice_as_array!","slice_as_array","Convert a slice to an array.\n`slice_to_array!(slice, [element_type; array_length]) -&gt; Option&lt;&amp;[element_type; array_length]&gt;`",null,null],[14,"slice_as_array_mut!","","Convert a mutable slice to a mutable array.\n`slice_to_array_mut!(mutable_slice, [element_type; array_length]) -&gt; Option&lt;&amp;mut [element_type; array_length]&gt;`",null,null]],"paths":[]};
initSearch(searchIndex);
